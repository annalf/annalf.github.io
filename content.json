{"meta":{"title":"wangxf","subtitle":"","description":"hello word！","author":"wangxf","url":"http://annalf.github.io","root":"/"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2021-05-17T02:45:06.618Z","updated":"2021-05-14T08:56:49.971Z","comments":false,"path":"/404.html","permalink":"http://annalf.github.io/404.html","excerpt":"","text":""},{"title":"about","date":"2021-05-17T01:34:36.000Z","updated":"2021-05-17T02:45:52.858Z","comments":true,"path":"about/index.html","permalink":"http://annalf.github.io/about/index.html","excerpt":"","text":"CSDN网站: https://blog.csdn.net/qq_36197517?spm=1000.2115.3001.5343 墨天轮: https://www.modb.pro/u/12394 ITPUB: http://www.itpub.net/home.php?mod=space&amp;uid=31561155"},{"title":"书单","date":"2021-05-17T02:45:06.563Z","updated":"2021-05-14T11:03:17.000Z","comments":true,"path":"books/index.html","permalink":"http://annalf.github.io/books/index.html","excerpt":"","text":"CSDN网站：https://www.csdn.net/"},{"title":"友情链接","date":"2021-05-17T02:45:06.579Z","updated":"2021-05-14T08:56:49.976Z","comments":true,"path":"links/index.html","permalink":"http://annalf.github.io/links/index.html","excerpt":"","text":""},{"title":"文章分类","date":"2018-10-14T16:03:57.000Z","updated":"2021-05-17T01:50:52.767Z","comments":false,"path":"categories/index.html","permalink":"http://annalf.github.io/categories/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2021-05-17T02:45:06.587Z","updated":"2021-05-14T08:56:49.977Z","comments":false,"path":"repository/index.html","permalink":"http://annalf.github.io/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2019-06-29T03:35:42.000Z","updated":"2021-05-17T01:50:34.848Z","comments":false,"path":"tags/index.html","permalink":"http://annalf.github.io/tags/index.html","excerpt":"","text":""},{"title":"schedule","date":"2021-05-17T01:56:48.000Z","updated":"2021-05-17T01:56:48.936Z","comments":true,"path":"schedule/index.html","permalink":"http://annalf.github.io/schedule/index.html","excerpt":"","text":""}],"posts":[{"title":"oracle11g+rac+关闭开启归档","slug":"oracle11g-rac-关闭开启归档","date":"2021-05-15T09:32:57.000Z","updated":"2021-05-15T09:32:57.000Z","comments":true,"path":"2021/05/15/oracle11g-rac-关闭开启归档/","link":"","permalink":"http://annalf.github.io/2021/05/15/oracle11g-rac-%E5%85%B3%E9%97%AD%E5%BC%80%E5%90%AF%E5%BD%92%E6%A1%A3/","excerpt":"","text":"一致性停库 1srvctl stop database -d node 启动一节点至mount 1srvctl start instance -d node -i node1 -o mount 关闭归档 1alter database noarchivelog; 关闭数据库 1srvctl stop database -d ndoe 启动数据库 1srvctl start database -d node 查看数据库状态 1srvctl status database -d node 检查归档 12archive log listalter system set log_archive_format=&#x27;node_%t_%s_%r.log&#x27; scope=spfile; 设置归档路径（目录需提前创建好） 1alter system set log_archive_dest_1=&#x27;location=+data/node/archivelog&#x27; scope=spfile; 关闭数据库 1srvctl stop database -d ndoe 启动数据库 1srvctl start database -d node 查看数据库状态 1srvctl status database -d node 检查归档 1archive log list","categories":[{"name":"oracle","slug":"oracle","permalink":"http://annalf.github.io/categories/oracle/"}],"tags":[{"name":"oralce","slug":"oralce","permalink":"http://annalf.github.io/tags/oralce/"}]},{"title":"win+11g+单机+adg部署","slug":"win-11g-单机-adg部署","date":"2021-05-15T08:03:13.000Z","updated":"2021-05-15T08:03:13.000Z","comments":true,"path":"2021/05/15/win-11g-单机-adg部署/","link":"","permalink":"http://annalf.github.io/2021/05/15/win-11g-%E5%8D%95%E6%9C%BA-adg%E9%83%A8%E7%BD%B2/","excerpt":"","text":"1、服务器环境介绍及规划1、服务器环境primary: 12345IP地址：192.168.168.68os版本：win server 2008 R2DB版本：oracle11.2.0.4oracle_sid：wangxfdb_unique_name：wangxf standby: 12345IP地址：192.168.168.72os版本：win server 2008 R2DB版本：oracle11.2.0.4oracle_sid：wangxfdb_unique_name: wangxfs 2、主库配置（primary）检查日志情况 123456789SELECT log_mode, flashback_on, force_logging, supplemental_log_data_min min, supplemental_log_data_pk pk, supplemental_log_data_ui ui, supplemental_log_data_fk fk, supplemental_log_data_all allc FROM v$database; 归档 123456shutdown immediatestartup mount;alter database archivelog;alter system set log_archive_format=&#x27;wangxf_%t_%s_%r.log&#x27; scope=spfile; alter system set log_archive_dest_1=&#x27;location=D:\\app\\wangxf\\archivelog&#x27; scope=spfile;alter database open; force logging 1alter database force logging; flashback 1alter database flashback on; 3、创建备库日志文件（primary）查看日志组文件 123456789101112131415161718SQL&gt; set wrap offSQL&gt; select * from v$logfile order by group#;行将被截断 GROUP# STATUS TYPE MEMBER---------- ------- ------- ----------------------------------------------------- 1 ONLINE D:\\APP\\WANGXF\\ORADATA\\WANGXF\\REDO01.LOG 2 ONLINE D:\\APP\\WANGXF\\ORADATA\\WANGXF\\REDO02.LOG 3 ONLINE D:\\APP\\WANGXF\\ORADATA\\WANGXF\\REDO03.LOGSQL&gt; select * from v$log;行将被截断行将被截断行将被截断行将被截断 GROUP# THREAD# SEQUENCE# BYTES BLOCKSIZE MEMBERS ARC STATUS---------- ---------- ---------- ---------- ---------- ---------- --- ---------- 1 1 7 52428800 512 1 NO CURRENT 2 1 5 52428800 512 1 YES INACTIVE 3 1 6 52428800 512 1 YES INACTIVE 创建日志文件 1234alter database add standby logfile group 4(&#x27;D:\\APP\\WANGXF\\ORADATA\\WANGXF\\STANDBY04.LOG&#x27;)size 50m;alter database add standby logfile group 5(&#x27;D:\\APP\\WANGXF\\ORADATA\\WANGXF\\STANDBY05.LOG&#x27;)size 50m;alter database add standby logfile group 6(&#x27;D:\\APP\\WANGXF\\ORADATA\\WANGXF\\STANDBY06.LOG&#x27;)size 50m;alter database add standby logfile group 7(&#x27;D:\\APP\\WANGXF\\ORADATA\\WANGXF\\STANDBY07.LOG&#x27;)size 50m; 4、修改主库系统参数（primary） dg_config 填写的是主备库的 db_unique_name。 12show parameter db_unique_namealter system set log_archive_config=&#x27;dg_config=(wangxf,wangxfs)&#x27; scope=spfile; 设置归档日志的存放位置： 123alter system set log_archive_dest_1=&#x27;LOCATION=D:\\app\\wangxf\\archivelog valid_for=(all_logfiles,all_roles) db_unique_name=wangxf&#x27; scope=spfile;alter system set log_archive_dest_2=&#x27;SERVICE=wangxfs ASYNC VALID_FOR=(ONLINE_LOGFILES,PRIMARY_ROLE) DB_UNIQUE_NAME=wangxfs&#x27; scope=spfile; 注：第一个 wangxfs 是 tnsname.ora 的连接名，第二个 wangxfs 是 DB_UNIQUE_NAME 启用设置的日志路径： 12alter system set log_archive_dest_state_1=enable scope=spfile;alter system set log_archive_dest_state_2=enable scope=spfile; 启用强制30分钟切换一次日志 1alter system set archive_lag_target=1800 scope=spfile; 设置归档日志进程的最大数量（视实际情况调整）： 1alter system set log_archive_max_processes=30 scope=both; 设置 standby 库从哪个数据库获取归档日志（只对 standby 库有效，在主库上设置是为了在故障切换后，主库可以成为备库使用）： 12alter system set fal_server=&#x27;wangxfs&#x27; scope=both;alter system set fal_client=&#x27;wangxf&#x27; scope=both; 设置文件管理模式，此项设置为自动，不然在主库创建数据文件后，备库不会自动创建： 1alter system set standby_file_management=auto scope=spfile; 启用 OMF 功能： 1alter system set db_create_file_dest=&#x27;D:\\APP\\WANGXF\\ORADATA&#x27; scope=spfile; 如果主备库文件的存放路径不同，还需要设置以下两个参数（需要重启数据库生效）： 12alter system set db_file_name_convert=&#x27;D:\\APP\\WANGXFS\\ORADATA&#x27;,&#x27;D:\\APP\\WANGXF\\ORADATA&#x27; scope=spfile;alter system set log_file_name_convert=&#x27;D:\\APP\\WANGXFS\\ORADATA&#x27;,&#x27;D:\\APP\\WANGXF\\ORADATA&#x27; scope=spfile; 检查重点配置项 1234567891011121314151617select name, value from v$parameter where name in (&#x27;db_name&#x27;,&#x27;db_unique_name&#x27;,&#x27;log_archive_config&#x27;,&#x27;log_archive_dest_1&#x27;,&#x27;log_archive_dest_2&#x27;,&#x27;log_archive_dest_state_1&#x27;,&#x27;log_archive_dest_state_2&#x27;,&#x27;remote_login_passwordfile&#x27;,&#x27;log_archive_format&#x27;,&#x27;log_archive_max_processes&#x27;,&#x27;fal_server&#x27;,&#x27;db_file_name_convert&#x27;,&#x27;log_file_name_convert&#x27;,&#x27;standby_file_management&#x27;)/ 一些参数需要重启数据库生效（如文件映射等） 5、生成pfile文件（primary）1create pfile=&#x27;D:\\soft\\init_wangxf.ora&#x27; from spfile; 6、创建密码文件（primary）1orapwd file=D:\\app\\soft\\PWDris.ora password=aqa 7、拷贝pfile文件和密码文件至备端（primary）8、备库配置网络监听（standby）listener.ora 内容如下： 12345678910111213141516LISTENER = (DESCRIPTION_LIST = (DESCRIPTION = (ADDRESS = (PROTOCOL = TCP)(HOST = 192.168.168.78)(PORT = 1521)) (ADDRESS = (PROTOCOL = IPC)(KEY = EXTPROC1521)) ) )SID_LIST_LISTENER = (SID_LIST = (SID_DESC = (GLOBAL_DBNAME = wangxf) (ORACLE_HOME = D:\\app\\wangxf\\product\\11.2.0\\dbhome_1) (SID_NAME = wangxf) ) )ADR_BASE_LISTENER = D:\\app\\wangxf tnsname.ora 内容如下： 123456789101112131415161718WANGXF = (DESCRIPTION = (ADDRESS = (PROTOCOL = TCP)(HOST = 192.168.168.77)(PORT = 1521)) (CONNECT_DATA = (SERVER = DEDICATED) (SERVICE_NAME = wangxf) ) )WANGXFS = (DESCRIPTION = (ADDRESS = (PROTOCOL = TCP)(HOST = 192.168.168.78)(PORT = 1521)) (CONNECT_DATA = (SERVER = DEDICATED) (SERVICE_NAME = wangxf) ) ) 重启一下监听： 12lsnrctl stoplsnrctl start 9、主库配置网络监听（primary）listener.ora 内容如下： 12345678910111213141516LISTENER = (DESCRIPTION_LIST = (DESCRIPTION = (ADDRESS = (PROTOCOL = TCP)(HOST = 192.168.168.77)(PORT = 1521)) (ADDRESS = (PROTOCOL = IPC)(KEY = EXTPROC1521)) ) )SID_LIST_LISTENER = (SID_LIST = (SID_DESC = (GLOBAL_DBNAME = wangxf) (ORACLE_HOME = D:\\app\\wangxf\\product\\11.2.0\\dbhome_1) (SID_NAME = wangxf) ) )ADR_BASE_LISTENER = D:\\app\\wangxf tnsname.ora 内容如下： 123456789101112131415161718WANGXF = (DESCRIPTION = (ADDRESS = (PROTOCOL = TCP)(HOST = 192.168.168.77)(PORT = 1521)) (CONNECT_DATA = (SERVER = DEDICATED) (SERVICE_NAME = wangxf) ) )WANGXFS = (DESCRIPTION = (ADDRESS = (PROTOCOL = TCP)(HOST = 192.168.168.78)(PORT = 1521)) (CONNECT_DATA = (SERVER = DEDICATED) (SERVICE_NAME = wangxf) ) ) 重启一下监听： 12lsnrctl stoplsnrctl start 10、测试联通性(如果不通请检查防火墙配置)（primary+standby）备库 12tnsping wangxftnsping wangxfs 主库 12tnsping wangxftnsping wangxfs 11、修改备库pfile文件，主要修改如下信息 （standby）12345678910*.db_create_file_dest=&#x27;D:\\APP\\WANGXFS\\ORADATA&#x27;*.control_files=&#x27;D:\\APP\\WANGXF\\ORADATA\\wangxf\\control01.ctl&#x27;,&#x27;D:\\APP\\WANGXF\\ORADATA\\wangxf\\control02.ctl&#x27;*.db_file_name_convert=&#x27;D:\\APP\\WANGXF\\ORADATA&#x27;,&#x27;D:\\APP\\WANGXFS\\ORADATA&#x27;;*.log_file_name_convert=&#x27;D:\\APP\\WANGXF\\ORADATA&#x27;,&#x27;D:\\APP\\WANGXFS\\ORADATA&#x27;;*.db_unique_name=&#x27;wangxfs&#x27;*.fal_client=&#x27;wangxfs&#x27;*.fal_server=&#x27;wangxf&#x27;*.log_archive_dest_1=&#x27;LOCATION=D:\\app\\wangxfs\\archivelog valid_for=(all_logfiles,all_roles) db_unique_name=wangxfs&#x27;*.log_archive_dest_2=&#x27;SERVICE=wangxf ASYNC VALID_FOR=(ONLINE_LOGFILES,PRIMARY_ROLE) DB_UNIQUE_NAME=wangxf&#x27; 创建参数文件中涉及到的目录 12、使用参数文件起库至nomount（standby）1234startup nomount pfile=&#x27;D:\\soft\\init_wangxf.ora&#x27;;create spfile from pfile=&#x27;D:\\soft\\init_wangxf.ora&#x27;;shutdown immediate;startup nomount; 确认 db_unique_name 1show parameter db_unique_name; 13、复制数据文件（standby）1rman target sys/oracle@wangxf auxiliary sys/oracle@wangxfs 确认我们已经连接上主库和备库 12connected to target database: DXJCDB (DBID=3999615226)connected to auxiliary database: DXJCDB (DBID=3999681020) 执行以下命令：(注意检查目录是否都存在) 1duplicate target database for standby from active database; 命令执行完后，可以看到主库在开始复制文件到备库中 注：duplicate target database for standby from active database dorecover nofilenamecheck;如果复制数据库时，备库的路径和原库一致，就需要加 nofilenamecheck，不然会报错。 14、复制完成后，打开standby数据库开启实时同步(standby库打开默认只读)123alter database open; alter database recover managed standby database using current logfile disconnect from session; 关闭日志应用 1ALTER DATABASE RECOVER MANAGED STANDBY DATABASE CANCEL; 检查当前日志应用 1SELECT PROCESS, STATUS, THREAD#, SEQUENCE#, BLOCK#, BLOCKS FROM V$MANAGED_STANDBY; 15、状态检查查看主数据库状态 123$sqlplus / as sysdbaselect database_role from v$database; 登录到备库上查看： 123$sqlplus / as sysdbaselect database_role from v$database; 检查归档日志是否能正常传输（日志的序号必须是一样的）： 主库 1select SEQUENCE#, FIRST_TIME, NEXT_TIME, APPLIED, ARCHIVED from V$ARCHIVED_LOG; 备库 1select SEQUENCE#, FIRST_TIME, NEXT_TIME, APPLIED, ARCHIVED from V$ARCHIVED_LOG; b)切换日志测试 主库 123alter system switch logfile;select SEQUENCE#, FIRST_TIME, NEXT_TIME, APPLIED, ARCHIVED from V$ARCHIVED_LOG; 备库 1select SEQUENCE#, FIRST_TIME, NEXT_TIME, APPLIED, ARCHIVED from V$ARCHIVED_LOG; 16、主备切换(SWITCHOVER) 主库切换为备库 1select open_mode,switchover_status from v$database; 查询结果是 TO STANDBY 或 SESSIONS ACTIVE 表明可以进行切换； 1234ALTER DATABASE COMMIT TO SWITCHOVER TO PHYSICAL STANDBY;shutdown immediate;startup mount;select database_role from v$database; 备库切换为主库 1select open_mode,switchover_status from v$database; TO PRIMARY 或 SESSIONS ACTIVE 表明可以切换成主库； 123alter database commit to switchover to primary with session shutdown;ALTER DATABASE OPEN;select switchover_status,database_role,open_mode from v$database; 备库切换为主库后开启日志应用 12alter database open;alter database recover managed standby database using current logfile disconnect from session; 然后检查日志即可","categories":[{"name":"oracle","slug":"oracle","permalink":"http://annalf.github.io/categories/oracle/"}],"tags":[{"name":"adg","slug":"adg","permalink":"http://annalf.github.io/tags/adg/"}]},{"title":"dbm 部署使用","slug":"dbm-部署使用","date":"2021-05-15T05:02:50.000Z","updated":"2021-05-15T05:02:50.000Z","comments":true,"path":"2021/05/15/dbm-部署使用/","link":"","permalink":"http://annalf.github.io/2021/05/15/dbm-%E9%83%A8%E7%BD%B2%E4%BD%BF%E7%94%A8/","excerpt":"","text":"一、基础环境准备1、检查源备端adg环境 2、dbm主机操作系统基于CentOS7.9 Linux 2、安装rpm包 ​ 部署docker rpm下面所有rpm包按照数字顺序记性安装 二、docker环境准备1、创建目录1mkdir /ect/docker 2、修改docker配置文件daemon.json123456789101112131415161718[root@dbm dbm]# more /etc/docker/daemon.json &#123; &quot;oom-score-adjust&quot;: -1000, &quot;storage-driver&quot;: &quot;overlay2&quot;, &quot;storage-opts&quot;: [&quot;overlay2.override_kernel_check=true&quot;], &quot;data-root&quot;: &quot;/dbm/docker&quot;, &quot;insecure-registries&quot;: [&quot;0.0.0.0/0&quot;], &quot;registry-mirrors&quot;: [ &quot;https://eqcxmbvw.mirror.aliyuncs.com&quot;,&quot;https://hub-mirror.c.163.com&quot;], &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;], &quot;log-driver&quot;: &quot;json-file&quot;, &quot;log-opts&quot;: &#123; &quot;max-size&quot;: &quot;100m&quot;, &quot;max-file&quot;: &quot;5&quot; &#125;, &quot;max-concurrent-downloads&quot;: 10, &quot;max-concurrent-uploads&quot;: 10, &quot;bip&quot;: &quot;169.254.123.1/24&quot;&#125; 注： “data-root”: “/dbm/docker”, docker文件存放目录 3、拷贝配置文件启动docker服务 12cp daemon.json /ect/dockersystemctl start docker 三、server端程序部署1、镜像上传123docker load -i dbmanager-db.tardocker load -i dbmanager-server-v1.0.tardocker load -i dbmanager-ui-v1.0.tar 2、查看镜像12345[root@dbm docker_images]# docker imagesREPOSITORY TAG IMAGE ID CREATED SIZEdbmanager-ui v1.0 461a2e6a9821 7 days ago 417MBdbmanager-server v1.0 ebba457aa9dc 7 days ago 606MBdbmanager-db latest 06e972ec86cf 18 months ago 804MB 3、启动mysql库启动mysql库(注意images名称和启动脚本名称,注意mysql放置的位置) 123456789101112131415[root@dbm docker_images]# more start_db.sh docker run -d \\--net=host --log-opt max-size=100m --log-opt max-file=5 \\-v /dbm/mysql/mysql33060/data:/var/lib/mysql \\-v /dbm/mysql/mysql33060/log:/var/log/mysql \\-v /dbm/mysql/mysql33060/socket:/var/sock/mysqld \\-e TIMEZONE=Asia/Shanghai \\-e MYSQL_ROOT_PASSWORD=root \\-e MYSQL_GENERAL_LOG=0 \\-e MYSQL_PORT=33060 \\-e MYSQL_SERVER_ID=1 \\-e MYSQL_INNODB_BUFFER_POOL_SIZE=1024M \\--name dbmanager-db --restart=&quot;always&quot; \\dbmanager-db[root@dbm docker_images]# ./start_db.sh 4、mysql配置登录mysql容器bash环境 1docker exec -ti bb bash 登录mysql 1mysql -uroot -proot 查看版本 1\\s 创建dbmanager库 1create database dbmanager; 创建用户 1grant all on dbmanager.* to dbmanager@&#x27;%&#x27; identified by &#x27;dbmanager&#x27;; 5、导入sql退出主宿主机，登录mysql 123mysql -udbmanager -p -h192.168.168.74 -P33060 -A dbmanagersource dbm_init.sql 6、检查配置文件启动服务12345678910111213141516171819202122232425262728293031323334[root@dbm docker_images]# vi docker-compose.yml ---version: &#x27;2&#x27;services: dbmanager-server: restart: always image: dbmanager-server:v1.0 hostname: dbmanager-server container_name: dbmanager-server ports: - 8088:8088 environment: TZ: &quot;Asia/Shanghai&quot; USERNAME: dbmanager PASSWORD: dbmanager URL: &quot;jdbc:mysql://192.168.168.74:33060/dbmanager?characterEncoding=utf8&quot; volumes: - /dbm/server/logs:/app/log dbmanager-ui: restart: always image: dbmanager-ui:v1.0 hostname: dbmanager-ui container_name: dbmanager-ui extra_hosts: - dbmanager-server:192.168.168.74 ports: - 80:80 environment: TZ: &quot;Asia/Shanghai&quot; depends_on: - dbmanager-server volumes: - /dbm/ui/logs:/usr/local/nginx/logs 启动服务 1docker-compose up -d 检查服务 12345[root@dbm docker_images]# docker ps -aCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES44c29e281edb dbmanager-ui:v1.0 &quot;/app/docker-entrypo…&quot; 46 hours ago Up 15 minutes 0.0.0.0:80-&gt;80/tcp dbmanager-ui2c533d075c8e dbmanager-server:v1.0 &quot;/app/docker-entrypo…&quot; 46 hours ago Up 15 minutes 0.0.0.0:8088-&gt;8088/tcp dbmanager-server4d70c7a658a9 dbmanager-db &quot;/docker-entrypoint.…&quot; 46 hours ago Up 15 minutes dbmanager-db 查看信息 1docker-compose ps 停止服务 1docker-compose stop 四、agent端程序部署1、数据库创建用户并授权（此时即可进行数据库的监控）1234567891011[root@dbm init_sql]# more oracle_grant.sql create user dbmon identified by dbmon default tablespace users;grant select on sys.user$ to dbmon;grant select on sys.ts$ to dbmon;grant select on sys.tab$ to dbmon;grant select on sys.obj$ to dbmon;grant select on sys.seg$ to dbmon;grant select on sys.deferred_stg$ to dbmon;grant select any table to dbmon;grant select any dictionary to dbmon;grant connect,resource to dbmon; 2、部署agent代理（用户adg切换等）拷贝程序及环境 1scp -rp jdk agent sql 192.168.168.71:/data/ 修改文件的属性 123chown oracle:oinstall /data/jdk -R chown oracle:oinstall /data/sql -R chown oracle:oinstall /data/agent -R 3、登录oracle创建表12sqlplus dbmon/dbmon@oracle_proc.sql 4、配置jdk环境变量(配置至oracle用户也可以)12345678910vi /etc/profileexport JAVA_HOME=/kafka/java/jdk1.8.0_121export JRE_HOME=$JAVA_HOME/jre;export JAVA_BIN=$JAVA_HOME/binexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jarexport PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$PATHsource /etc/profile 检查版本 12java -versionjavac -version 5、编辑agent脚本123456789101112131415[root@dbm agent]# vi start.sh export COMPARE_LICENSE=344af083755a095d1ab9ac5ff6b85afdd30e9d8aexport COMPARE_EXPIRE_DATE=2022-01-01export ORACLE_SID=ora11export ORACLE_HOME=/ora11/app/oracle/product/11.2.0.4/db_1export ORA_LOG_PATH=/ora11/app/oracle/diag/rdbms/ora11/ora11/tracePORT=9999RESULT_DIR=/home/oracle11/result2API_URL=http://172.16.202.32/horsTIMEOUT=300java -Dserver.port=$PORT -Dshell.resultDir=$RESULT_DIR -Dshell.timeout=$TIMEOUT -Dshell.agentType=linux -Dremoteserver.api=$API_URL -jar agent_linux-1.0.jar 注意： ORACLE_SID oracle实例名 ORACLE_HOME oracle家目录 ORA_LOG_PATH oracle告警日志目录（show parameter back） PORT agent端口号 RESULT_DIR agent 使用目录 API_URL server界面地址 6、启动agent前台启动 1./start.sh 后台启动 1nohup sh start.sh &gt; log.agent 2&gt;&amp;1 &amp; 五、界面配置登录地址：http://192.168.168.74/login登录认证：admin/123456 1、添加oralce数据库需要监控的数据库全部创建用户然后添加进该处 2、添加容灾列表根据上述添加过列表的数据库，配置adg源备端配套关系 3、容灾切换操作可点击日志，查看源备端告警日志（可以查看到内容也确保agent启动无误） 点击容灾切换进行切换操作，如果遇到状态长时间未更新，可点击状态更新 4、oracle监控详细内容点击oralce列表，再点击标签名称即可查看详细监控信息 5、查看具体内容","categories":[{"name":"dbm","slug":"dbm","permalink":"http://annalf.github.io/categories/dbm/"}],"tags":[{"name":"dbm","slug":"dbm","permalink":"http://annalf.github.io/tags/dbm/"}]},{"title":"windows10 部署hexo","slug":"windows10-部署hexo","date":"2021-05-15T01:53:21.000Z","updated":"2021-05-15T01:53:21.000Z","comments":true,"path":"2021/05/15/windows10-部署hexo/","link":"","permalink":"http://annalf.github.io/2021/05/15/windows10-%E9%83%A8%E7%BD%B2hexo/","excerpt":"","text":"一、部署基础程序1、部署node.js​ 下载地址：https://nodejs.org/en/download/​ 安装文件：node-v16.1.0-x64.msi​ 部署目录：D:\\hexo\\nodejs​ 安装修改下安装目录，其他全部默认即可​ 2、部署git​ 下载地址：https://git-scm.com/downloads​ 安装文件：Git-2.31.1-64-bit.exe​ 部署目录：D:\\hexo\\Git​ 安装修改下安装目录，其他全部默认即可​ 3、查看版本校验是否安装成功123456789101112131415C:\\Users\\wangxf&gt;node -vv16.1.0C:\\Users\\wangxf&gt;npm -vnpm noticenpm notice New minor version of npm available! 7.11.2 -&gt; 7.13.0npm notice Changelog: https://github.com/npm/cli/releases/tag/v7.13.0npm notice Run npm install -g npm@7.13.0 to update!npm notice7.11.2C:\\Users\\wangxf&gt;git --versiongit version 2.31.1.windows.1C:\\Users\\wangxf&gt;node -v 二、部署hexo1、创建目录存放hexo相关文件和博客内容等本地目录：D:\\hexo\\data 2、安装hexo微博框架在此目录下E:\\AppDatas\\blog右边空白处右键单击，选择Git Bash here，然后在命令行输入 1npm install -g hexo-cli 测试是否安装成功 1hexo -v 3、创建博客文件夹1D:\\hexo\\data\\blog 4、初始化hexo1hexo init 初始化完成后hexo的目录结构： 123456789├── node_modules：是依赖包├── public #存放被解析markdown、html文件├── scaffolds #当您新建文章时，根据 scaffold生成文件├── source #资源文件夹| └── _posts #博客文章目录└── themes #主题├── _config.yml #网站的配置信息。标题、网站名称等├── db.json：#source解析所得到的├── package.json # 应用程序的配置信息 5、启动博客hexo server，这里可以直接用简写为hexo s 6、登录hexo浏览器输入地址：http://localhost:4000/ 三、创建博客1、停止hexoctrl+c 即可 2、创建文章123456wangxf@wangxf MINGW64 /d/hexo/data/blog$ hexo n &quot;windows10 部署hexo本地博客&quot;INFO Validating configINFO Created: D:\\hexo\\data\\blog\\source\\_posts\\windows10-部署hexo本地博客.mdwangxf@wangxf MINGW64 /d/hexo/data/blog 3、编辑文章1234567wangxf@wangxf MINGW64 /d/hexo/data/blog$ cd source/_posts/wangxf@wangxf MINGW64 /d/hexo/data/blog/source/_posts$ vim windows10-部署hexo本地博客.md:wq保存退出 4、发布blogcd至家目录先清理一下: hexo clean然后生成一下（对应英文hexo generate）: hexo g重启：hexo s 1234567891011121314wangxf@wangxf MINGW64 /d/hexo/data/blog/source/_posts$ cd ../../wangxf@wangxf MINGW64 /d/hexo/data/blog$ hexo cleanINFO Validating configINFO Deleted database.INFO Deleted public folder.wangxf@wangxf MINGW64 /d/hexo/data/blog$ hexo gwangxf@wangxf MINGW64 /d/hexo/data/blog$ hexo s 四、更换hexo主题pure主题：https://blog.cofess.com/2017/11/01/hexo-blog-theme-pure-usage-description.html中文说明文档：https://github.com/cofess/hexo-theme-pure/blob/master/README.cn.md 1、下载主题123456789wangxf@wangxf MINGW64 /d/hexo/data/blog$ git clone https://github.com/cofess/hexo-theme-pure.git themes/pureCloning into &#x27;themes/pure&#x27;...remote: Enumerating objects: 3392, done.remote: Counting objects: 100% (7/7), done.remote: Compressing objects: 100% (6/6), done.remote: Total 3392 (delta 0), reused 1 (delta 0), pack-reused 3385Receiving objects: 100% (3392/3392), 4.59 MiB | 34.00 KiB/s, done.Resolving deltas: 100% (1892/1892), done. 2、修改配置文件hexo根目录下的_config.yml文件1234wangxf@wangxf MINGW64 /d/hexo/data/blog$ vi _config.ymltheme: pure 3、更新主题（后期如果需要的话）12345wangxf@wangxf MINGW64 /d/hexo/data/blog$ cd themes/pure/wangxf@wangxf MINGW64 /d/hexo/data/blog/themes/pure (master)$ git pull 4、安装插件hexo-wordcount 1npm install hexo-wordcount --save hexo-generator-json-content 1npm install hexo-generator-json-content --save hexo-generator-feed 1npm install hexo-generator-feed --save hexo-generator-sitemap 1npm install hexo-generator-sitemap --save hexo-generator-baidu-sitemap 1npm install hexo-generator-baidu-sitemap --save 5、主题配置编辑主题根目录下的_config.yml文件即可 注意事项: 1、所有配置项分号后面必须添加空格 6、修改语言​ 查看该主题支持哪些语言：D:\\hexo\\data\\blog\\themes\\pure\\languages​ 修改文件:D:\\hexo\\data\\blog_config.yml文件中language: default 五、hexo博客front-matter格式1、通用格式Front-matter 是文件最上方以 — 分隔的区域，用于指定个别文件的变量，举例来说： 123title: Hello Worlddate: 2013/7/13 20:46:25--- 以下是预先定义的参数，您可在模板中使用这些参数值并加以利用。参数 描述 默认值layout 布局title 标题 文章的文件名date 建立日期 文件建立日期updated 更新日期 文件更新日期comments 开启文章的评论功能 truetags 标签（不适用于分页）categories 分类（不适用于分页）permalink 覆盖文章网址 matery主题的相关详细格式针对本站的matery主题的相关选项介绍 12345678910111213141516171819---title: 标题date: 2020-02-29 16:00:00summary: # 文章摘要toc: truemathjax: truetop: truecover: trueabbrlink: 213245 # 自己可随意设置img: &#x27;https://img-blog.csdnimg.cn/20200309120551356.png&#x27; # 设置文章背景图，设置为外链图片，访问快tags: - 算法 - 计算机知识categories: - 算法author: # 设置文章作者password: # 设置密码（yml中开启相应功能）coverImg: # 轮播图片--- 2、修改创建文章时的固定模板一般我们在通过以下命令创建文章时，采用的是默认的模板，我们可以对默认的模板进行修改 1hexo new “文章的标题” 修改/scaffolds/post.md文件即可,修改如下 123456789101112---title: &#123;&#123; title &#125;&#125;date: &#123;&#123; date &#125;&#125;updated: &#123;&#123; date &#125;&#125;categories: - 待分类 - tags: - 待标签 - toc: true--- 五、编辑界面Theme by cofess base on pure. 问题按F12可以调整这部分编码但是重新生成代码后会覆盖 六、blog中插入图片1、安装插件直接安装hexo-asset-image插件，会导致路径引用问题，使图片无法显示，所以需要安装修改好的包 1npm install https://github.com/CodeFalling/hexo-asset-image --save 2、配置md文件-偏好设置-图像 3、修改hexo根目录下_config.yml配置文件flase修改为true1post_asset_folder: true 六、部署hexo-admin插件管理hexo(没什么用)1、安装部署1npm install hexo-admin --save 2、启动hexo1hexo s 2、登录1http://localhost:4000/admin 七、hexo后台启动1、配置脚本并配置开机自启动（需要开启cmd窗口）（1）、配置bat脚本如下123D:cd D:\\hexo\\data\\bloghexo s -p 666 （2）、vbs脚本可以配置开机自启动12set ws=WScript.CreateObject(&quot;WScript.Shell&quot;)ws.Run &quot;E:\\\\WorkSpace\\\\webProject\\\\Hexo-blog\\\\hexo-server.bat /start&quot;,0 2、使用pm2（会弹出cmd窗口）（1）、安装pm21npm install -g pm2 （2）、创建执行脚本pm2.js12345678910//pm2.jsconst &#123; exec &#125; = require(&#x27;child_process&#x27;)exec(&#x27;hexo server -p 666&#x27;,(error, stdout, stderr) =&gt; &#123; if(error)&#123; console.log(`exec error: $&#123;error&#125;`) return &#125; console.log(`stdout: $&#123;stdout&#125;`); console.log(`stderr: $&#123;stderr&#125;`);&#125;) （3）、运行脚本123456789101112131415161718192021222324252627282930313233343536pm2 start pm2.jspm2 stop pm2.jspm2 status pm2.jspm2 delete pm2wangxf@wangxf MINGW64 /d/hexo/data/blog$ pm2 start pm2.js[PM2] Starting D:\\hexo\\data\\blog\\pm2.js in fork_mode (1 instance)[PM2] Done.┌─────┬────────┬─────────────┬─────────┬─────────┬──────────┬────────┬──────┬───────────┬──────────┬──────────┬──────────┬──────────┐│ id │ name │ namespace │ version │ mode │ pid │ uptime │ ↺ │ status │ cpu │ mem │ user │ watching │├─────┼────────┼─────────────┼─────────┼─────────┼──────────┼────────┼──────┼───────────┼──────────┼──────────┼──────────┼──────────┤│ 0 │ pm2 │ default │ 0.0.0 │ fork │ 20808 │ 0s │ 0 │ online │ 0% │ 29.7mb │ wangxf │ disabled │└─────┴────────┴─────────────┴─────────┴─────────┴──────────┴────────┴──────┴───────────┴──────────┴──────────┴──────────┴──────────┘wangxf@wangxf MINGW64 /d/hexo/data/blog$ pm2 list┌─────┬────────┬─────────────┬─────────┬─────────┬──────────┬────────┬──────┬───────────┬──────────┬──────────┬──────────┬──────────┐│ id │ name │ namespace │ version │ mode │ pid │ uptime │ ↺ │ status │ cpu │ mem │ user │ watching │├─────┼────────┼─────────────┼─────────┼─────────┼──────────┼────────┼──────┼───────────┼──────────┼──────────┼──────────┼──────────┤│ 0 │ pm2 │ default │ 0.0.0 │ fork │ 20808 │ 16s │ 0 │ online │ 0% │ 26.2mb │ wangxf │ disabled │└─────┴────────┴─────────────┴─────────┴─────────┴──────────┴────────┴──────┴───────────┴──────────┴──────────┴──────────┴──────────┘wangxf@wangxf MINGW64 /d/hexo/data/blog$ pm2 stop all[PM2] Applying action stopProcessId on app [all](ids: [ 0 ])[PM2] [pm2](0) ✓┌─────┬────────┬─────────────┬─────────┬─────────┬──────────┬────────┬──────┬───────────┬──────────┬──────────┬──────────┬──────────┐│ id │ name │ namespace │ version │ mode │ pid │ uptime │ ↺ │ status │ cpu │ mem │ user │ watching │├─────┼────────┼─────────────┼─────────┼─────────┼──────────┼────────┼──────┼───────────┼──────────┼──────────┼──────────┼──────────┤│ 0 │ pm2 │ default │ 0.0.0 │ fork │ 0 │ 0 │ 0 │ stopped │ 0% │ 0b │ wangxf │ disabled │└─────┴────────┴─────────────┴─────────┴─────────┴──────────┴────────┴──────┴───────────┴──────────┴──────────┴──────────┴──────────┘wangxf@wangxf MINGW64 /d/hexo/data/blog 3、直接后台启动（不能关闭git bash窗口）(1)、直接后台启动1hexo s -p 666 &amp; 4、使用forever(1)、安装forever1npm install -g forever (2)、hexo家目录下常见js文件1require(&#x27;hexo&#x27;).init(&#123;command: &#x27;server -p 666&#x27;&#125;); (3)、启动forever12345678910111213141516171819202122232425262728293031323334wangxf@wangxf MINGW64 /d/hexo/data/blog$ forever start forever-hexo.jswarn: --minUptime not set. Defaulting to: 1000mswarn: --spinSleepTime not set. Your script will exit if it does not stay up for at least 1000msinfo: Forever processing file: forever-hexo.js(node:932) Warning: Accessing non-existent property &#x27;padLevels&#x27; of module exports inside circular dependency(Use `node --trace-warnings ...` to show where the warning was created)(node:932) Warning: Accessing non-existent property &#x27;padLevels&#x27; of module exports inside circular dependencywangxf@wangxf MINGW64 /d/hexo/data/blog$ forever list(node:12892) Warning: Accessing non-existent property &#x27;padLevels&#x27; of module exports inside circular dependency(Use `node --trace-warnings ...` to show where the warning was created)(node:12892) Warning: Accessing non-existent property &#x27;padLevels&#x27; of module exports inside circular dependencyinfo: Forever processes runningdata: uid command script forever pid id logfile uptimedata: [0] WsBQ &quot;D:\\hexo\\nodejs\\node.exe&quot; D:\\hexo\\data\\blog\\forever-hexo.js 15644 21624 C:\\Users\\wangxf\\.forever\\WsBQ.log 0:0:0:0.091wangxf@wangxf MINGW64 /d/hexo/data/blog$ forever stop forever-hexo.js(node:16672) Warning: Accessing non-existent property &#x27;padLevels&#x27; of module exports inside circular dependency(Use `node --trace-warnings ...` to show where the warning was created)(node:16672) Warning: Accessing non-existent property &#x27;padLevels&#x27; of module exports inside circular dependencyerror: Forever cannot find process with id: forever-hexo.jswangxf@wangxf MINGW64 /d/hexo/data/blog$ forever list(node:7584) Warning: Accessing non-existent property &#x27;padLevels&#x27; of module exports inside circular dependency(Use `node --trace-warnings ...` to show where the warning was created)(node:7584) Warning: Accessing non-existent property &#x27;padLevels&#x27; of module exports inside circular dependencyinfo: No forever processes runningwangxf@wangxf MINGW64 /d/hexo/data/blog$ (4)、forever运行目录为1C:\\Users\\wangxf\\.forever","categories":[{"name":"hexo","slug":"hexo","permalink":"http://annalf.github.io/categories/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://annalf.github.io/tags/hexo/"}]}],"categories":[{"name":"oracle","slug":"oracle","permalink":"http://annalf.github.io/categories/oracle/"},{"name":"dbm","slug":"dbm","permalink":"http://annalf.github.io/categories/dbm/"},{"name":"hexo","slug":"hexo","permalink":"http://annalf.github.io/categories/hexo/"}],"tags":[{"name":"oralce","slug":"oralce","permalink":"http://annalf.github.io/tags/oralce/"},{"name":"adg","slug":"adg","permalink":"http://annalf.github.io/tags/adg/"},{"name":"dbm","slug":"dbm","permalink":"http://annalf.github.io/tags/dbm/"},{"name":"hexo","slug":"hexo","permalink":"http://annalf.github.io/tags/hexo/"}]}